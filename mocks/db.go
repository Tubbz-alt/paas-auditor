// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alphagov/paas-billing/db (interfaces: SQLClient)

package mocks

import (
	sql "database/sql"
	cloudfoundry "github.com/alphagov/paas-billing/cloudfoundry"
	db "github.com/alphagov/paas-billing/db"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockSQLClient is a mock of SQLClient interface
type MockSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLClientMockRecorder
}

// MockSQLClientMockRecorder is the mock recorder for MockSQLClient
type MockSQLClientMockRecorder struct {
	mock *MockSQLClient
}

// NewMockSQLClient creates a new mock instance
func NewMockSQLClient(ctrl *gomock.Controller) *MockSQLClient {
	mock := &MockSQLClient{ctrl: ctrl}
	mock.recorder = &MockSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSQLClient) EXPECT() *MockSQLClientMockRecorder {
	return _m.recorder
}

// BeginTx mocks base method
func (_m *MockSQLClient) BeginTx() (db.SQLClient, error) {
	ret := _m.ctrl.Call(_m, "BeginTx")
	ret0, _ := ret[0].(db.SQLClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (_mr *MockSQLClientMockRecorder) BeginTx() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BeginTx", reflect.TypeOf((*MockSQLClient)(nil).BeginTx))
}

// Commit mocks base method
func (_m *MockSQLClient) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockSQLClientMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Commit", reflect.TypeOf((*MockSQLClient)(nil).Commit))
}

// Exec mocks base method
func (_m *MockSQLClient) Exec(_param0 string, _param1 ...interface{}) (sql.Result, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Exec", _s...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (_mr *MockSQLClientMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Exec", reflect.TypeOf((*MockSQLClient)(nil).Exec), _s...)
}

// FetchLastGUID mocks base method
func (_m *MockSQLClient) FetchLastGUID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "FetchLastGUID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLastGUID indicates an expected call of FetchLastGUID
func (_mr *MockSQLClientMockRecorder) FetchLastGUID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchLastGUID", reflect.TypeOf((*MockSQLClient)(nil).FetchLastGUID), arg0)
}

// InitSchema mocks base method
func (_m *MockSQLClient) InitSchema() error {
	ret := _m.ctrl.Call(_m, "InitSchema")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSchema indicates an expected call of InitSchema
func (_mr *MockSQLClientMockRecorder) InitSchema() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InitSchema", reflect.TypeOf((*MockSQLClient)(nil).InitSchema))
}

// InsertUsageEventList mocks base method
func (_m *MockSQLClient) InsertUsageEventList(_param0 *cloudfoundry.UsageEventList, _param1 string) error {
	ret := _m.ctrl.Call(_m, "InsertUsageEventList", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUsageEventList indicates an expected call of InsertUsageEventList
func (_mr *MockSQLClientMockRecorder) InsertUsageEventList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InsertUsageEventList", reflect.TypeOf((*MockSQLClient)(nil).InsertUsageEventList), arg0, arg1)
}

// Prepare mocks base method
func (_m *MockSQLClient) Prepare(_param0 string) (*sql.Stmt, error) {
	ret := _m.ctrl.Call(_m, "Prepare", _param0)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (_mr *MockSQLClientMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Prepare", reflect.TypeOf((*MockSQLClient)(nil).Prepare), arg0)
}

// QueryJSON mocks base method
func (_m *MockSQLClient) QueryJSON(_param0 string, _param1 ...interface{}) io.Reader {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "QueryJSON", _s...)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// QueryJSON indicates an expected call of QueryJSON
func (_mr *MockSQLClientMockRecorder) QueryJSON(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "QueryJSON", reflect.TypeOf((*MockSQLClient)(nil).QueryJSON), _s...)
}

// QueryRowJSON mocks base method
func (_m *MockSQLClient) QueryRowJSON(_param0 string, _param1 ...interface{}) io.Reader {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "QueryRowJSON", _s...)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// QueryRowJSON indicates an expected call of QueryRowJSON
func (_mr *MockSQLClientMockRecorder) QueryRowJSON(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "QueryRowJSON", reflect.TypeOf((*MockSQLClient)(nil).QueryRowJSON), _s...)
}

// Rollback mocks base method
func (_m *MockSQLClient) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockSQLClientMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Rollback", reflect.TypeOf((*MockSQLClient)(nil).Rollback))
}

// UpdateViews mocks base method
func (_m *MockSQLClient) UpdateViews() error {
	ret := _m.ctrl.Call(_m, "UpdateViews")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateViews indicates an expected call of UpdateViews
func (_mr *MockSQLClientMockRecorder) UpdateViews() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateViews", reflect.TypeOf((*MockSQLClient)(nil).UpdateViews))
}
