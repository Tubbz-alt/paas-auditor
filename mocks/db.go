// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alphagov/paas-billing/db (interfaces: SQLClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudfoundry "github.com/alphagov/paas-billing/cloudfoundry"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockSQLClient is a mock of SQLClient interface
type MockSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLClientMockRecorder
}

// MockSQLClientMockRecorder is the mock recorder for MockSQLClient
type MockSQLClientMockRecorder struct {
	mock *MockSQLClient
}

// NewMockSQLClient creates a new mock instance
func NewMockSQLClient(ctrl *gomock.Controller) *MockSQLClient {
	mock := &MockSQLClient{ctrl: ctrl}
	mock.recorder = &MockSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLClient) EXPECT() *MockSQLClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSQLClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSQLClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLClient)(nil).Close))
}

// FetchLastGUID mocks base method
func (m *MockSQLClient) FetchLastGUID(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "FetchLastGUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLastGUID indicates an expected call of FetchLastGUID
func (mr *MockSQLClientMockRecorder) FetchLastGUID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLastGUID", reflect.TypeOf((*MockSQLClient)(nil).FetchLastGUID), arg0)
}

// InitSchema mocks base method
func (m *MockSQLClient) InitSchema() error {
	ret := m.ctrl.Call(m, "InitSchema")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSchema indicates an expected call of InitSchema
func (mr *MockSQLClientMockRecorder) InitSchema() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSchema", reflect.TypeOf((*MockSQLClient)(nil).InitSchema))
}

// InsertUsageEventList mocks base method
func (m *MockSQLClient) InsertUsageEventList(arg0 *cloudfoundry.UsageEventList, arg1 string) error {
	ret := m.ctrl.Call(m, "InsertUsageEventList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUsageEventList indicates an expected call of InsertUsageEventList
func (mr *MockSQLClientMockRecorder) InsertUsageEventList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsageEventList", reflect.TypeOf((*MockSQLClient)(nil).InsertUsageEventList), arg0, arg1)
}

// QueryJSON mocks base method
func (m *MockSQLClient) QueryJSON(arg0 string, arg1 ...interface{}) io.Reader {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryJSON", varargs...)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// QueryJSON indicates an expected call of QueryJSON
func (mr *MockSQLClientMockRecorder) QueryJSON(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryJSON", reflect.TypeOf((*MockSQLClient)(nil).QueryJSON), varargs...)
}

// QueryRowJSON mocks base method
func (m *MockSQLClient) QueryRowJSON(arg0 string, arg1 ...interface{}) io.Reader {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowJSON", varargs...)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// QueryRowJSON indicates an expected call of QueryRowJSON
func (mr *MockSQLClientMockRecorder) QueryRowJSON(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowJSON", reflect.TypeOf((*MockSQLClient)(nil).QueryRowJSON), varargs...)
}

// UpdateViews mocks base method
func (m *MockSQLClient) UpdateViews() error {
	ret := m.ctrl.Call(m, "UpdateViews")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateViews indicates an expected call of UpdateViews
func (mr *MockSQLClientMockRecorder) UpdateViews() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateViews", reflect.TypeOf((*MockSQLClient)(nil).UpdateViews))
}
