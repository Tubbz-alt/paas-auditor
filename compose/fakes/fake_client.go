// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-billing/compose"
	"github.com/compose/gocomposeapi"
)

type FakeClient struct {
	GetAuditEventsStub        func(params composeapi.AuditEventsParams) (*[]composeapi.AuditEvent, []error)
	getAuditEventsMutex       sync.RWMutex
	getAuditEventsArgsForCall []struct {
		params composeapi.AuditEventsParams
	}
	getAuditEventsReturns struct {
		result1 *[]composeapi.AuditEvent
		result2 []error
	}
	getAuditEventsReturnsOnCall map[int]struct {
		result1 *[]composeapi.AuditEvent
		result2 []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetAuditEvents(params composeapi.AuditEventsParams) (*[]composeapi.AuditEvent, []error) {
	fake.getAuditEventsMutex.Lock()
	ret, specificReturn := fake.getAuditEventsReturnsOnCall[len(fake.getAuditEventsArgsForCall)]
	fake.getAuditEventsArgsForCall = append(fake.getAuditEventsArgsForCall, struct {
		params composeapi.AuditEventsParams
	}{params})
	fake.recordInvocation("GetAuditEvents", []interface{}{params})
	fake.getAuditEventsMutex.Unlock()
	if fake.GetAuditEventsStub != nil {
		return fake.GetAuditEventsStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAuditEventsReturns.result1, fake.getAuditEventsReturns.result2
}

func (fake *FakeClient) GetAuditEventsCallCount() int {
	fake.getAuditEventsMutex.RLock()
	defer fake.getAuditEventsMutex.RUnlock()
	return len(fake.getAuditEventsArgsForCall)
}

func (fake *FakeClient) GetAuditEventsArgsForCall(i int) composeapi.AuditEventsParams {
	fake.getAuditEventsMutex.RLock()
	defer fake.getAuditEventsMutex.RUnlock()
	return fake.getAuditEventsArgsForCall[i].params
}

func (fake *FakeClient) GetAuditEventsReturns(result1 *[]composeapi.AuditEvent, result2 []error) {
	fake.GetAuditEventsStub = nil
	fake.getAuditEventsReturns = struct {
		result1 *[]composeapi.AuditEvent
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetAuditEventsReturnsOnCall(i int, result1 *[]composeapi.AuditEvent, result2 []error) {
	fake.GetAuditEventsStub = nil
	if fake.getAuditEventsReturnsOnCall == nil {
		fake.getAuditEventsReturnsOnCall = make(map[int]struct {
			result1 *[]composeapi.AuditEvent
			result2 []error
		})
	}
	fake.getAuditEventsReturnsOnCall[i] = struct {
		result1 *[]composeapi.AuditEvent
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuditEventsMutex.RLock()
	defer fake.getAuditEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ compose.Client = new(FakeClient)
