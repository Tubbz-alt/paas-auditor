// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-billing/cfstore"
)

type FakeCFDataClient struct {
	ListServicePlansStub        func() ([]cfstore.ServicePlan, error)
	listServicePlansMutex       sync.RWMutex
	listServicePlansArgsForCall []struct{}
	listServicePlansReturns     struct {
		result1 []cfstore.ServicePlan
		result2 error
	}
	listServicePlansReturnsOnCall map[int]struct {
		result1 []cfstore.ServicePlan
		result2 error
	}
	ListServicesStub        func() ([]cfstore.Service, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct{}
	listServicesReturns     struct {
		result1 []cfstore.Service
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 []cfstore.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFDataClient) ListServicePlans() ([]cfstore.ServicePlan, error) {
	fake.listServicePlansMutex.Lock()
	ret, specificReturn := fake.listServicePlansReturnsOnCall[len(fake.listServicePlansArgsForCall)]
	fake.listServicePlansArgsForCall = append(fake.listServicePlansArgsForCall, struct{}{})
	fake.recordInvocation("ListServicePlans", []interface{}{})
	fake.listServicePlansMutex.Unlock()
	if fake.ListServicePlansStub != nil {
		return fake.ListServicePlansStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServicePlansReturns.result1, fake.listServicePlansReturns.result2
}

func (fake *FakeCFDataClient) ListServicePlansCallCount() int {
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	return len(fake.listServicePlansArgsForCall)
}

func (fake *FakeCFDataClient) ListServicePlansReturns(result1 []cfstore.ServicePlan, result2 error) {
	fake.ListServicePlansStub = nil
	fake.listServicePlansReturns = struct {
		result1 []cfstore.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDataClient) ListServicePlansReturnsOnCall(i int, result1 []cfstore.ServicePlan, result2 error) {
	fake.ListServicePlansStub = nil
	if fake.listServicePlansReturnsOnCall == nil {
		fake.listServicePlansReturnsOnCall = make(map[int]struct {
			result1 []cfstore.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansReturnsOnCall[i] = struct {
		result1 []cfstore.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDataClient) ListServices() ([]cfstore.Service, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct{}{})
	fake.recordInvocation("ListServices", []interface{}{})
	fake.listServicesMutex.Unlock()
	if fake.ListServicesStub != nil {
		return fake.ListServicesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServicesReturns.result1, fake.listServicesReturns.result2
}

func (fake *FakeCFDataClient) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeCFDataClient) ListServicesReturns(result1 []cfstore.Service, result2 error) {
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 []cfstore.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDataClient) ListServicesReturnsOnCall(i int, result1 []cfstore.Service, result2 error) {
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 []cfstore.Service
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 []cfstore.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDataClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFDataClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfstore.CFDataClient = new(FakeCFDataClient)
