// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	"github.com/alphagov/paas-billing/eventfetchers/cffetcher"
)

type FakeUsageEventsAPI struct {
	GetStub        func(afterGUID string, count int, minAge time.Duration) (*cffetcher.UsageEventList, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		afterGUID string
		count     int
		minAge    time.Duration
	}
	getReturns struct {
		result1 *cffetcher.UsageEventList
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *cffetcher.UsageEventList
		result2 error
	}
	TypeStub        func() string
	typeMutex       sync.RWMutex
	typeArgsForCall []struct{}
	typeReturns     struct {
		result1 string
	}
	typeReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsageEventsAPI) Get(afterGUID string, count int, minAge time.Duration) (*cffetcher.UsageEventList, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		afterGUID string
		count     int
		minAge    time.Duration
	}{afterGUID, count, minAge})
	fake.recordInvocation("Get", []interface{}{afterGUID, count, minAge})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(afterGUID, count, minAge)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeUsageEventsAPI) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeUsageEventsAPI) GetArgsForCall(i int) (string, int, time.Duration) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].afterGUID, fake.getArgsForCall[i].count, fake.getArgsForCall[i].minAge
}

func (fake *FakeUsageEventsAPI) GetReturns(result1 *cffetcher.UsageEventList, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *cffetcher.UsageEventList
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageEventsAPI) GetReturnsOnCall(i int, result1 *cffetcher.UsageEventList, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *cffetcher.UsageEventList
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *cffetcher.UsageEventList
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageEventsAPI) Type() string {
	fake.typeMutex.Lock()
	ret, specificReturn := fake.typeReturnsOnCall[len(fake.typeArgsForCall)]
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct{}{})
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if fake.TypeStub != nil {
		return fake.TypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.typeReturns.result1
}

func (fake *FakeUsageEventsAPI) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeUsageEventsAPI) TypeReturns(result1 string) {
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUsageEventsAPI) TypeReturnsOnCall(i int, result1 string) {
	fake.TypeStub = nil
	if fake.typeReturnsOnCall == nil {
		fake.typeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.typeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUsageEventsAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsageEventsAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cffetcher.UsageEventsAPI = new(FakeUsageEventsAPI)
