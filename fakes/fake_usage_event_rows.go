// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-billing/eventio"
)

type FakeUsageEventRows struct {
	NextStub        func() bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct{}
	nextReturns     struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct{}
	errReturns     struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	EventJSONStub        func() ([]byte, error)
	eventJSONMutex       sync.RWMutex
	eventJSONArgsForCall []struct{}
	eventJSONReturns     struct {
		result1 []byte
		result2 error
	}
	eventJSONReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	EventStub        func() (*eventio.UsageEvent, error)
	eventMutex       sync.RWMutex
	eventArgsForCall []struct{}
	eventReturns     struct {
		result1 *eventio.UsageEvent
		result2 error
	}
	eventReturnsOnCall map[int]struct {
		result1 *eventio.UsageEvent
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsageEventRows) Next() bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct{}{})
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if fake.NextStub != nil {
		return fake.NextStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nextReturns.result1
}

func (fake *FakeUsageEventRows) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeUsageEventRows) NextReturns(result1 bool) {
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUsageEventRows) NextReturnsOnCall(i int, result1 bool) {
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUsageEventRows) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeUsageEventRows) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeUsageEventRows) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsageEventRows) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsageEventRows) Err() error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct{}{})
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.errReturns.result1
}

func (fake *FakeUsageEventRows) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeUsageEventRows) ErrReturns(result1 error) {
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsageEventRows) ErrReturnsOnCall(i int, result1 error) {
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsageEventRows) EventJSON() ([]byte, error) {
	fake.eventJSONMutex.Lock()
	ret, specificReturn := fake.eventJSONReturnsOnCall[len(fake.eventJSONArgsForCall)]
	fake.eventJSONArgsForCall = append(fake.eventJSONArgsForCall, struct{}{})
	fake.recordInvocation("EventJSON", []interface{}{})
	fake.eventJSONMutex.Unlock()
	if fake.EventJSONStub != nil {
		return fake.EventJSONStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.eventJSONReturns.result1, fake.eventJSONReturns.result2
}

func (fake *FakeUsageEventRows) EventJSONCallCount() int {
	fake.eventJSONMutex.RLock()
	defer fake.eventJSONMutex.RUnlock()
	return len(fake.eventJSONArgsForCall)
}

func (fake *FakeUsageEventRows) EventJSONReturns(result1 []byte, result2 error) {
	fake.EventJSONStub = nil
	fake.eventJSONReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageEventRows) EventJSONReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.EventJSONStub = nil
	if fake.eventJSONReturnsOnCall == nil {
		fake.eventJSONReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.eventJSONReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageEventRows) Event() (*eventio.UsageEvent, error) {
	fake.eventMutex.Lock()
	ret, specificReturn := fake.eventReturnsOnCall[len(fake.eventArgsForCall)]
	fake.eventArgsForCall = append(fake.eventArgsForCall, struct{}{})
	fake.recordInvocation("Event", []interface{}{})
	fake.eventMutex.Unlock()
	if fake.EventStub != nil {
		return fake.EventStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.eventReturns.result1, fake.eventReturns.result2
}

func (fake *FakeUsageEventRows) EventCallCount() int {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	return len(fake.eventArgsForCall)
}

func (fake *FakeUsageEventRows) EventReturns(result1 *eventio.UsageEvent, result2 error) {
	fake.EventStub = nil
	fake.eventReturns = struct {
		result1 *eventio.UsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageEventRows) EventReturnsOnCall(i int, result1 *eventio.UsageEvent, result2 error) {
	fake.EventStub = nil
	if fake.eventReturnsOnCall == nil {
		fake.eventReturnsOnCall = make(map[int]struct {
			result1 *eventio.UsageEvent
			result2 error
		})
	}
	fake.eventReturnsOnCall[i] = struct {
		result1 *eventio.UsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageEventRows) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	fake.eventJSONMutex.RLock()
	defer fake.eventJSONMutex.RUnlock()
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsageEventRows) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eventio.UsageEventRows = new(FakeUsageEventRows)
