// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-billing/eventserver/auth"
)

type FakeAuthorizer struct {
	SpacesStub        func() ([]string, error)
	spacesMutex       sync.RWMutex
	spacesArgsForCall []struct{}
	spacesReturns     struct {
		result1 []string
		result2 error
	}
	spacesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	AdminStub        func() (bool, error)
	adminMutex       sync.RWMutex
	adminArgsForCall []struct{}
	adminReturns     struct {
		result1 bool
		result2 error
	}
	adminReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthorizer) Spaces() ([]string, error) {
	fake.spacesMutex.Lock()
	ret, specificReturn := fake.spacesReturnsOnCall[len(fake.spacesArgsForCall)]
	fake.spacesArgsForCall = append(fake.spacesArgsForCall, struct{}{})
	fake.recordInvocation("Spaces", []interface{}{})
	fake.spacesMutex.Unlock()
	if fake.SpacesStub != nil {
		return fake.SpacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.spacesReturns.result1, fake.spacesReturns.result2
}

func (fake *FakeAuthorizer) SpacesCallCount() int {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return len(fake.spacesArgsForCall)
}

func (fake *FakeAuthorizer) SpacesReturns(result1 []string, result2 error) {
	fake.SpacesStub = nil
	fake.spacesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthorizer) SpacesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.SpacesStub = nil
	if fake.spacesReturnsOnCall == nil {
		fake.spacesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.spacesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthorizer) Admin() (bool, error) {
	fake.adminMutex.Lock()
	ret, specificReturn := fake.adminReturnsOnCall[len(fake.adminArgsForCall)]
	fake.adminArgsForCall = append(fake.adminArgsForCall, struct{}{})
	fake.recordInvocation("Admin", []interface{}{})
	fake.adminMutex.Unlock()
	if fake.AdminStub != nil {
		return fake.AdminStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.adminReturns.result1, fake.adminReturns.result2
}

func (fake *FakeAuthorizer) AdminCallCount() int {
	fake.adminMutex.RLock()
	defer fake.adminMutex.RUnlock()
	return len(fake.adminArgsForCall)
}

func (fake *FakeAuthorizer) AdminReturns(result1 bool, result2 error) {
	fake.AdminStub = nil
	fake.adminReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthorizer) AdminReturnsOnCall(i int, result1 bool, result2 error) {
	fake.AdminStub = nil
	if fake.adminReturnsOnCall == nil {
		fake.adminReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.adminReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthorizer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	fake.adminMutex.RLock()
	defer fake.adminMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthorizer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Authorizer = new(FakeAuthorizer)
